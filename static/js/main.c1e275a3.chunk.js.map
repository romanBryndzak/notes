{"version":3,"sources":["components/page/Notes.module.css","components/Menu.js","components/page/Create.js","components/page/NoteItem.js","components/page/Notes.js","components/page/Edit.js","components/page/Comment.js","components/page/Settings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Create","createNote","React","useState","value","setValue","name","setName","onSubmit","event","preventDefault","trim","placeholder","onChange","target","NoteItem","note","N","wrapperNote","content","Notes","notes","wrapper","map","key","Edit","Comment","Settings","App","setNotes","text","concat","Date","now","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1e275a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Notes_wrapper__1By--\",\"wrapperNote\":\"Notes_wrapperNote__Wg3s-\"};","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Menu() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <NavLink className=\"navbar-brand\" to={'/notes'}>Navbar <strong>Notes</strong></NavLink>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\r\n                    aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"/>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                <div className=\"navbar-nav\">\r\n                    <NavLink className=\"nav-link\" to={'/Create'}>Create<span className=\"sr-only\">(current)</span></NavLink>\r\n                    <NavLink className=\"nav-link\" to={'/Edit'}>Edit</NavLink>\r\n                    <NavLink className=\"nav-link\" to={'/Comment'}>Comment</NavLink>\r\n                    <NavLink className=\"nav-link\" to={'/Settings'}>Settings</NavLink>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from \"react\";\r\nimport './auxiliary.css'\r\n\r\nfunction Create({createNote}) {\r\n    const [value, setValue] = React.useState('');\r\n    const [name, setName] = React.useState('');\r\n\r\n    function formHandler(event) {\r\n        event.preventDefault();\r\n        if (value.trim()) {\r\n            createNote(value, name);\r\n            setValue('');\r\n            setName('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formHandler} className='create'>\r\n            <input type=\"text\" placeholder='name' onChange={\r\n                event => setName(event.target.value)}\r\n                   className='name'\r\n            />\r\n            <input type=\"text\" placeholder='text' onChange={\r\n                event => setValue(event.target.value)}/>\r\n            <button>Add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Create;","import React from \"react\";\r\nimport N from './Notes.module.css'\r\n\r\nfunction NoteItem({note}) {\r\n\r\n    return (\r\n        <div className={N.wrapperNote}>\r\n            <p><strong>{note.name}</strong><button>delete</button></p>\r\n            <li>\r\n            <span>\r\n                {note.content}\r\n            </span>\r\n            </li>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NoteItem","import React from \"react\";\r\nimport N from './Notes.module.css'\r\nimport NoteItem from \"./NoteItem\";\r\n\r\nfunction Notes({notes}) {\r\n\r\n    return (\r\n        <ul className={N.wrapper}>\r\n            {notes.map(note => {\r\n                    return <NoteItem\r\n                        note={note} key={note.id}\r\n                    />\r\n                }\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Notes","import React from \"react\";\r\n\r\nfunction Edit() {\r\n    return <div>\r\n        <h2>Edit</h2>\r\n    </div>\r\n}\r\n\r\nexport default Edit","import React from \"react\";\r\n\r\nfunction Comment() {\r\n    return <div>\r\n        <h2>Comment</h2>\r\n    </div>\r\n}\r\n\r\nexport default Comment","import React from \"react\";\r\n\r\nfunction Settings() {\r\n    return <div>\r\n   <h2>Settings</h2>\r\n    </div>\r\n}\r\n\r\nexport default Settings","import React from 'react';\nimport './App.css';\nimport Menu from './components/Menu';\nimport Create from \"./components/page/Create\";\nimport {Route} from \"react-router-dom\";\nimport Notes from \"./components/page/Notes\";\nimport Edit from \"./components/page/Edit\";\nimport Comment from \"./components/page/Comment\";\nimport Settings from \"./components/page/Settings\";\n\nfunction App() {\n    const [notes, setNotes] = React.useState([\n        {id: 0, name: 'roma', content: 'React is very well library.'}\n    ]);\n\n    function createNote(text, name) {\n        setNotes(notes.concat([{\n            id: Date.now(),\n            name,\n            content: text,\n        }]))\n    }\n\n    return (\n        <div className='App'>\n            <header className='header'>\n                <h2>SPA for create notes</h2><hr/>\n                <Menu/><hr/>\n            </header>\n            <div className='page'>\n                <Route path={'/Create'} render={() =>\n                    <Create createNote={createNote}/>}\n                />\n                <Route path={'/Edit'} render={() => <Edit/>}/>\n                <Route path={'/Comment'} render={() => <Comment/>}/>\n                <Route path={'/Settings'} render={() => <Settings/>}/>\n                <Route path={'/notes'} render={() => <> </>}/>\n            </div>\n            <div className=\"notes\">\n                <Notes notes={notes}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}